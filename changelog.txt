02/08/15-10:44:23: Initial commit
02/08/15-10:46:19: Added changelog file.
02/08/15-16:48:03: Removed experts.dat file from repository
02/08/15-17:06:11: Adding TickReader and ignoring log files.
02/08/15-23:58:38: Updated syntax for TickReader.mq5
02/09/15-17:34:37: Added file generation support for TickReader.
02/09/15-21:12:43: Adding initial implementation for LogManager.
02/10/15-00:16:25: Started implementation of unit test library.
02/10/15-10:46:11: Refactored Test Suite for recursion support.
02/10/15-11:39:01: Added support for ASSERT macro.
02/10/15-17:23:24: Added support for test packages.
02/10/15-17:38:25: Cut Testing header in multiple parts.
02/10/15-22:24:04: Added minimal support to retrieve passed and failed tests.
02/10/15-23:22:37: Added CList usage for TestCases
02/10/15-23:29:15: Added list usage for TestSuites.
02/11/15-09:08:21: Retrieve all test data in TestSessionResult.
02/11/15-13:56:46: Retrieving messages as part of the test data.
02/11/15-16:06:41: Working on test result report page.
02/11/15-16:10:04: Added the html files on the repository.
02/12/15-09:18:43: Adding additional formating for test log page.
02/12/15-23:22:53: Updated log template to handle colors properly.
02/13/15-17:38:46: Started implementation of vecd class.
02/13/15-23:18:35: Investigating issue with CList for test suites.
02/14/15-09:11:15: Using array list for test suites to avoid linked list pointer mixing.
02/14/15-11:33:41: Added initial implementation for StringStream.
02/14/15-14:41:55: Added initial implementation for logging system.
02/14/15-15:05:56: Added support for FileLogger close.
02/15/15-16:49:44: Added core strategy implementation.
02/15/15-18:55:58: Trying to get algorithm to work.
02/17/15-02:04:20: Started implementation of RRL model.
02/17/15-12:11:49: Adding support for RRL model debugging.
02/18/15-17:27:10: Added initial implementation for LBFGS algorithm.
02/19/15-01:07:34: Finalized LBFGS implementation. Adding source for octave version.
02/19/15-14:56:21: Implemented optimization of RRL model with minCG.
02/21/15-16:51:36: Investigations on RRL model.
02/22/15-17:32:51: winning 0.00143 units in 1 week without too much drawndown.
02/22/15-18:02:12: Using eval_len as max evaluation length.
02/23/15-12:41:45: Added start and end signals for training.
02/23/15-14:52:19: Adding implementation of RRLCostFunction class.
02/23/15-15:58:09: Creating proper RRLModel.
02/23/15-16:31:30: Adding support for history generatino.
02/23/15-20:54:17: Added implementation for object map class.
02/23/15-22:54:39: Added HistoryMap tests.
02/24/15-16:10:02: Added initial implementation for strategy.
02/24/15-22:40:11: Refactoring classes for better trade model organization.
02/25/15-09:21:01: Added test on strategy dryrun. Minor fix in testing framework.
02/25/15-15:09:00: Adding batch and online training support.
02/25/15-15:59:48: Adding support for theoretical returns computation.
02/25/15-23:12:15: Added proper computation for returns mean and deviation.
02/26/15-18:37:43: Added initial implementation for online training model.
02/26/15-21:49:11: Initial setup for strategy evaluation.
02/27/15-14:40:28: Fixed incorrect value for transaction cost. Fixed max drawdown computation. Computed real stats on strategy.
02/27/15-15:09:54: Fixed computation of dFtdw. This didnt help.
02/27/15-15:26:25: Added suport for warmUp phase.
02/28/15-11:08:07: Added implementation for costFunction_SR.
03/02/15-09:45:25: Testing many things. Added trainMode support.
03/02/15-11:09:12: Adding implementation of train context for stochastic support.
03/02/15-13:31:08: Added implemntation of stochastic gradient descent.
03/02/15-15:24:41: Added test result for stochastic training.
03/02/15-16:09:40: Removed obsolete computeWeight method.
03/02/15-16:15:12: Removed some obsolete methods.
03/02/15-16:26:36: Removed initOnlineContext()
03/02/15-16:38:32: Added vectors for trailing signals and return moments.
03/02/15-20:48:17: Tested stochastic training with dFt_1 = 0.0 at start.
03/03/15-09:10:27: Tested with proper initial context settings before training.
03/03/15-09:33:18: Added variable for number of transactions. Using signal threshold of 0.8 for simple strategy test.
03/03/15-09:38:40: Added support for num deals computation in strategy eval.
03/03/15-11:27:03: Tested training with recomputation of Ft and Rt after theta update.
03/03/15-17:36:55: Tested with signal adaptation set to 0.02 => This has no effect (it is not used.).
03/03/15-20:14:45: Adding generic implementation of costfunction.
03/03/15-21:19:48: Tested with signal mean length set to 50 -> This will reduce the final wealth.
03/03/15-21:21:35: Merged changes.
03/04/15-00:12:48: Added proper implementation for generic cost function and train context.
03/04/15-00:43:42: Minor lyaout update.
03/04/15-02:04:10: Added initial implementation for DDR cost function. Preparing test for proper index in loadState.
03/04/15-11:52:38: Fixed input to loadState. Still testing with initial implementation.
03/04/15-20:56:21: Added long strategy evaluation test.
03/04/15-22:01:05: Added long test with signal threshold set to 0.0.
03/05/15-10:42:29: Performed test 13 with M1 and tcost=0.000001, threshold=0.0.
03/05/15-12:55:05: Removed vector test files from repository.
03/05/15-13:52:49: Started cleaning of TrainContext implementation.
03/05/15-16:31:40: Added implementation for DDR cost function.
03/05/15-15:06:20: Added Test 14 for 14 input returns.
03/05/15-19:09:44: Added test 15 with DDR cost function. Adding predict method in cost function.
03/05/15-17:46:19: Added test 16: evaluation with DDR cost function and 14 input returns.
03/05/15-20:38:17: Added test 17 - SR cost function with 20 input returns.
03/05/15-22:43:10: Merged files
03/06/15-00:02:58: Added train algorithm support.
03/06/15-01:36:38: Minimal correction on _len in TrainContext to for online training support.
03/06/15-14:01:43: Added SImpleRNG class. Doing some tests on generated prices.
03/07/15-23:49:09: Merged changes on SimpleRNG integration.
03/08/15-13:47:40: Restructured strategy evaluation method.
03/09/15-10:34:33: Using ratio on return prices to avoid precision issues. Improved SR cost precision.
03/09/15-12:48:40: Added test 18 with precise SR cost function and return ratio of 0.00001.
03/09/15-14:24:08: Added test for default SR cost computation.
03/09/15-14:37:31: Added requirements on default SR cost test.
03/09/15-15:27:46: Updated default values.
03/09/15-16:10:08: Implemented test for exact gradient computation.
03/09/15-20:39:40: Added Console logger to log manager by default. Added proper implementation of strategy evaluator.
03/09/15-22:00:42: Adding optimization on gradient descent.
03/09/15-22:07:07: Additional cleaning of optimization code.
03/09/15-23:13:34: Additional optimization on SR cost computation.
03/09/15-23:33:49: Preparing config for standard test.
03/10/15-23:12:46: Performing tests on multiplication precision.
03/10/15-23:59:43: Validated long test result.
03/11/15-08:02:26: Improved results on long test with improved formula.
03/11/15-09:01:03: Added evaluation report for test 19.
03/27/15-17:14:10: Added optimized implementation for DDR cost function.
03/27/15-18:47:18: Added optimizations for train contexts.
03/28/15-08:24:23: Added support for log prices. Fixed left duration computation.
03/28/15-10:48:24: Added RRLCostFunction as base for SR cost function.
03/28/15-10:51:27: not using _ctx.params anymore in DDR cost function.
03/28/15-12:35:22: Refactoring SR and DDR cost function to prepare merging.
03/28/15-12:38:44: Merged SR and DDR cost function.
04/18/15-23:03:17: Updated terminal version.
07/13/15-18:59:19: Updated version of MT5.
07/13/15-19:35:40: Added very first version of Nerv EA.
07/13/15-21:19:58: First version of tsunami strategy, only buying.
07/13/15-22:12:27: not really working implementation of stop loss update: still loosing most of the times.
07/13/15-22:24:08: Updating stop loss by increment of 10 points.
07/14/15-10:07:42: Adding initial implementation for nvTrader and nvSecurity.
07/14/15-10:35:15: Added copy construction and tests for nvSecurity.
07/14/15-12:37:27: Added support for stoploss update in Trader class.
07/14/15-12:43:46: Trying to fix error on stoploss update with ea_magic: but this doesn't seem to help at all.
07/14/15-14:29:52: Added initial implementation for PeriodTrader class.
07/14/15-15:34:00: Added version 2 of EA for re implementation of MACD trader.
07/14/15-19:11:07: First implementation of blade runner trader: can last one year without just dying... but still not making profit.
07/14/15-19:33:10: First version of the blade runner trader giving positive results on 1 year!
07/14/15-23:15:30: Added sigmoid update of stoploss level between ma20 and ma4 for bladerunner.
07/16/15-22:52:05: Initial implementation for delta variance computation.
07/16/15-22:57:33: Fixed non reinitialized bias issue.
07/16/15-23:18:07: Using delta variance to evaluate bias margins.
07/18/15-11:23:16: Built initial version of PeakTrader.
07/18/15-12:01:21: Minor changes in PeakTrader: using prev ticks vector.
07/18/15-14:14:04: Tweaked PeakTrader parameters to 3.0 and 1.3.
07/18/15-15:49:47: Added slope multiplier and stoploss multiplier for PeakTrader.
07/18/15-16:24:52: Added test in PeakTrader for MA20 invert signal.
07/18/15-16:51:06: Using equity level to close positions higher that 4 sigmas.
07/18/15-22:43:17: Tested implementation of risk aversion in PeakTrader.
07/19/15-00:15:46: Saved current reference for best results on 01/2011.
07/19/15-09:36:58: Tested implementation of trailing stop on PeakTrader.
07/19/15-09:43:03: Moved symbol declaration in PeriodTrader. Starting implementation of ScalpelTrader.
07/19/15-10:31:38: Added first implementation of ScalpelTrader: results are bad.
07/19/15-10:56:43: Tested trailing stop in scalpel trader without success.
07/19/15-11:38:24: Tested new drawdown management system on PeakTrader: results are not so clear.
07/20/15-10:52:16: Adding first implementation of ZonRecoveryTrader.
07/20/15-23:07:19: Implementing improvements on Zone Recovery trader.
07/25/15-10:03:55: Added initial implementation of Heiken Ashi trader.
07/25/15-14:08:12: Added our own HeikenAshi indicator. updated in Heiken Ashi trader.
07/25/15-16:21:40: HeikenAshi trader sustainable during 1 year.
07/25/15-16:34:40: Implemented risk zone bounded incremental trailing stop.
07/25/15-16:44:04: Implemented fixed risk size of 50 points.
07/25/15-16:46:12: Implemented fixed risk size of 250 points.
07/25/15-21:15:19: First wrking implementation of the ichimoku trader.
07/25/15-21:28:50: Ensuring the kijun sen line is above / under the kumo to enter a position.
07/26/15-21:49:17: Added todo list for ichimoku trader.
07/26/15-22:11:56: Updated implementation of Security class.
07/27/15-23:23:29: Added initial implementation of MultiCurrencyExpert.
07/27/15-23:33:04: Removed log file. Started implementation of ProtfolioManager.
08/01/15-13:49:17: Adding support base level functions in Currency Trader. Improvement in test system to support Log manager usage.
08/01/15-16:41:54: Extended test system with support for error testing. Performed initial tests on PortfolioManager.
08/01/15-22:27:35: Added final report for unit tests.
08/01/15-23:09:56: Added test for handling of multiple CurrencyTraders.
08/01/15-23:40:32: Added test on nvRemoveItem.
08/02/15-22:55:45: Added support for failed tests reporting after global unit test report.
08/02/15-23:39:14: Added weight computation support for CurrencyTrader.
08/03/15-21:40:48: Adding test for getNewID().
08/04/15-14:13:22: Added initial implementation for nvDeal class.
08/04/15-14:38:09: Added number of points in Deal class.
08/04/15-14:43:47: Added support for profit value in nvDeal.
08/04/15-15:02:10: Added initial support for utilities in nvDeal.
08/04/15-15:50:54: Adding initial implementation for deal open method.
08/04/15-16:10:56: Added support for close method in deal class.
08/04/15-17:36:17: Added support for number of assertions reporting in unit tests.
08/04/15-18:00:36: Added support for order type specification in nvDeal::open().
08/04/15-22:59:32: Adding support for utility computation and onDeal callback in currencytrader.
08/04/15-23:08:10: Added test to ensure only opened deals can be closed.
08/04/15-23:23:27: Adding profit argument in nvDeal::close().
08/04/15-23:34:44: Added support for nominal profit in nvDeal.
08/05/15-00:07:16: Adding test on currency trader utility computation.
08/10/15-21:57:53: Added template on support and resistance computation with indicator.
08/14/15-23:11:25: Fixed issue #2: Added support for lot size in nvDeal.
08/14/15-23:26:11: Fixed issue #4: Added additional test in currency trader for drawdown computation.
08/14/15-23:55:51: Fixed issue #3: Ensured that nvDeal and nvCurrencyTraders are deleted properly.
08/15/15-12:37:01: Fixed issue #10: added implementation and test for nvCurrencyTrader::collectDeals().
08/15/15-14:21:46: Providing initial implementation of Optimizer. Fixed Checks in Vec3d and other math classes.
08/15/15-14:24:05: Added math specs tests in expert test.
08/15/15-16:03:44: Added working version of Optimizer with ConjugateGradient algorithm.
08/15/15-16:17:48: Added support for LBFGS algorithm on nvOptimizer class.
08/15/15-17:02:17: Fixed issue #9: Added implementation and test for generic cost function implementation.
08/15/15-17:30:13: Renamed computeCost to compute in Optimizer class.
08/15/15-18:34:39: Working on issue #12: Separated computeCost and computeGradient methods.
08/15/15-19:02:11: Fixed issue #12: Added numerical gradient computation and gradient checks in nvOptimizer.
08/15/15-21:33:17: Working on issue #7: Added implementation for getprofitDerivative in nvDeal class.
08/16/15-00:07:29: Working on issue #7: Added initial implementation for UtilityEfficiencyOptimizer.
08/16/15-00:32:41: Fixed issue #1: removed _traderWeight from nvDeal class. Also added nv porefix on UtilityEfficiencyOptimizer class name.
08/16/15-12:13:30: Added covariance and correlation computation support in nvVecd.
08/16/15-12:55:57: Added computation of correlation for utility efficiency and fixed the unit tests accordingly.
08/16/15-13:02:13: Fixed issue #7: Providing initial implementation for the computation of the utility efficiency value as a correlation factor.
08/16/15-14:13:27: Fixed issue #6: using deal duration for profit utility computation in currency trader.
08/16/15-20:48:26: Working on issue #14: Added initial nvTradingAgent class.
08/16/15-20:58:45: Working on issue #14: Added nvCurrencyTrader::addTradingAgent() method.
08/16/15-20:58:56: Working on issue #14: Added nvCurrencyTrader::addTradingAgent() method.
08/16/15-21:06:16: Fixed issue #14: added nvCurrencyTrader::removeTradingAgent() method.
08/17/15-14:09:26: Working on issue #16: Added initial skeleton for the nvRiskManager class. Added minimal test.
08/17/15-14:14:58: Fixed issue #16: Added method PorfolioManager:getRiskManager().
08/17/15-16:02:24: Working on issue #18: Added support for risk level in risk manager class.
08/17/15-16:35:57: Working on issue #18: Added method nvRiskManager::getBalanceValue() to get the current balance in any valid currency.
08/17/15-17:33:15: Working on issue #18: Finalized implementation of nvRiskManager::evaluateLotSize() (but test missing). Added some utils functions.
